apiVersion: apps/v1
kind: Deployment
metadata:
  name: promotions-deployment
  namespace: default
  labels:
    app: promotions
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: promotions
  template:
    metadata:
      labels:
        app: promotions
    spec:
      terminationGracePeriodSeconds: 30
      containers:
        - name: promotions
          image: cluster-registry:5000/promotions:1.0
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            # Explicitly set runtime mode and port (wsgi.py also defaults to 8080; being explicit is clearer)
            - name: FLASK_ENV
              value: "production"
            - name: PORT
              value: "8080"
            # Connect to the in-cluster Postgres (K8S-07/08 will create a Service named `postgres`)
            - name: DATABASE_URI
              value: "postgresql+psycopg://postgres:postgres@postgres:5432/promotions"
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 2
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 20
            timeoutSeconds: 2
            failureThreshold: 3
          # If you need to control resources on the remote cluster, add requests/limits in K8S-13
          # resources:
          #   requests:
          #     cpu: "100m"
          #     memory: "128Mi"
          #   limits:
          #     cpu: "500m"
          #     memory: "512Mi"
